{
    "contents" : "#' Input Plugin of Fuzzy Clustering on Rcmdr\n#'\n#' @description Graphical User Interface on Rcmdr Plugin.\n#' This Plugin provide Interface to select variables of dataset that will be\n#' used for Fuzzy Clustering, methods selection, and parameter specification\n#' @export\npluginInput<-function(){\n  require(tcltk2)\n  require(tcltk)\n  require(Rcmdr)\n  #--------------------------#\n  #  DATASET                 #\n  #--------------------------#\n\n  dataset <- ActiveDataSet()\n  doItAndPrint(paste(\"data<-data.frame(\",dataset,\")\"))\n  var <- colnames(data)\n  var.choice<-c()\n  #--------------------------#\n  #  INTERFACE               #\n  #--------------------------#\n  #--WINDOWS-----------------#\n  win1 <- tktoplevel(width=750)\n  tktitle(win1) <- \"Fuzzy Clustering: Input GUI\"\n  #--FRAME DATA OPTIONS------#\n  fontTitle<- tkfont.create(family = \"Gentium Book Basic\", size = 15,\n                               weight = \"bold\", underline = T)\n  fontCommands<- tkfont.create(family = \"Gentium Basic\", size = 10,weight=\"bold\")\n  tkgrid(\n    tk2label(\n      win1, text = \"FUZZY CLUSTERING\", justify = \"right\",font=fontTitle\n    ),\n    padx = 15, pady = c(5, 5),row=0,column=0\n  )\n\n  win1$frame1<-tk2frame(win1,borderwidth=2,relief=\"flat\")\n  tkgrid(win1$frame1,padx=0,pady=c(0,0),row=1,column=0)\n  win1$var$list <-\n    tk2listbox(\n      win1$frame1,width = 35,height = 6,selectmode = \"multiple\"\n    )\n  tkgrid(\n    tk2label(\n      win1$frame1, text = \"Select Variables:\\n(Min. 2 Variables)\", justify = \"left\",\n      font=fontCommands\n    ),\n    padx = 15, pady = c(5, 5),sticky=\"w\",row=0,column=0\n  )\n  tkgrid(win1$var$list, padx = 15, pady = c(0, 15),row=1,column=0,rowspan=2)\n  for (i in var)\n    tkinsert(win1$var$list,\"end\",i)\n  tkselection.set(win1$var$list, 0)\n  win1$rButton<- tk2button(win1$frame1, text = \">>\",width=5)\n  tkgrid(win1$rButton, padx = 5, pady = c(0,5),sticky=\"s\",column=1,row=1)\n  win1$lButton<- tk2button(win1$frame1, text = \"<<\",width=5)\n  tkgrid(win1$lButton, padx = 5, pady = c(0,5),sticky=\"n\",column=1,row=2)\n\n  tkgrid(\n    tk2label(\n      win1$frame1, text = \"Cluster Variables: \\n(Min. 2 Variables)\", justify = \"left\",\n      font=fontCommands\n    ),\n    padx = 15, pady = c(5, 5),sticky=\"w\",row=0,column=2\n  )\n\n  win1$var$cluster <-\n    tk2listbox(\n      win1$frame1,width = 35,height = 6,selectmode = \"multiple\"\n    )\n  tkgrid(win1$var$cluster, padx = 15, pady = c(0, 15),row=1,column=2,rowspan=2)\n\n  onRight<-function(){\n    tkdelete(win1$var$cluster,0,\"end\")\n    var.choice<<- var[as.numeric(tkcurselection(win1$var$list))+1]\n    for (i in var.choice)\n      tkinsert(win1$var$cluster,\"end\",i)\n    tkselection.set(win1$var$cluster, 0)\n  }\n  onLeft<-function(){\n    var.remo.choice<<- var.choice[as.numeric(tkcurselection(win1$var$cluster))+1]\n    tkdelete(win1$var$cluster,0,\"end\")\n    var.choice<<-var.choice[-which(var.choice%in%var.remo.choice)]\n    for (i in var.choice)\n      tkinsert(win1$var$cluster,\"end\",i)\n    tkselection.set(win1$var$cluster, 0)\n    }\n  tkconfigure(win1$rButton,command=onRight)\n  tkconfigure(win1$lButton,command=onLeft)\n\n  #--METHODS    OPTIONS------#\n  win1$frame2<-tk2frame(win1,borderwidth=2,relief=\"flat\")\n  tkgrid(win1$frame2,padx=0,pady=c(0,0),row=2,column=0,sticky=\"w\")\n  fuzz.method <- c(\"Fuzzy C-Means\",\"Gustafson Kessel\")\n  win1$method <-\n    tk2combobox(win1$frame2,width = 15,values = fuzz.method)\n  nCluster <- tk2spinbox(win1$frame2,width = 3,value = c(2:nrow(data)))\n  fuzzifier.param <-\n    tk2spinbox(\n      win1$frame2,width = 5,value = seq(from = 1,to = 3, by = 0.1)\n    )\n  more.param<-c(1000,10^-13,0)\n  more.Dialog <- function(parent,returnValOnCancel = c(1000,10^-13,0)) {\n    dlg <- tktoplevel()\n    tktitle(dlg)<-\"More Parameter\"\n    tkwm.deiconify(dlg)\n    tkgrab.set(dlg)\n    tkfocus(dlg)\n    returnVal<-returnValOnCancel\n\n    MaxIterVal <- tclVar(returnVal[1])\n    MaxIterEntry <- tk2entry(dlg, width = 8,\n                             textvariable = MaxIterVal)\n    tkgrid(tklabel(dlg, text = \"Max iteration:\",\n                   font=fontCommands), MaxIterEntry, padx = 10, pady = 5,sticky=\"w\")\n\n    ThresholdVal <- tclVar(returnVal[2])\n    ThresholdEntry <- tk2entry(dlg, width = 8,\n                               textvariable = ThresholdVal)\n    tkgrid(tklabel(dlg, text = \"Threshold:\",\n                   font=fontCommands), ThresholdEntry, padx = 10, pady = 5,sticky=\"w\")\n\n    SeedVal <- tclVar(returnVal[3])\n    SeedEntry <- tk2entry(dlg, width = 8,\n                          textvariable = SeedVal)\n    tkgrid(tklabel(dlg, text = \"Seed:\",\n                   font=fontCommands), SeedEntry, padx = 10, pady = 5,sticky=\"w\")\n\n    onOK <- function() {\n      returnVal[1] <<- tclvalue(MaxIterVal)\n      returnVal[2] <<- tclvalue(ThresholdVal)\n      returnVal[3] <<- tclvalue(SeedVal)\n      tkgrab.release(dlg)\n      tkdestroy(dlg)\n      tkfocus(parent)\n    }\n    onCancel <- function() {\n      returnVal <<- returnValOnCancel\n      tkgrab.release(dlg)\n      tkdestroy(dlg)\n      tkfocus(parent)\n    }\n    butOK <- tk2button(dlg, text = \"OK\", width = -6, command = onOK)\n    butCancel <- tk2button(dlg, text = \"Cancel\", width = -6, command = onCancel)\n    tkgrid(butCancel, butOK, padx = 10, pady = c(0, 15))\n    tkfocus(dlg)\n    tkbind(dlg, \"<Destroy>\", function() {tkgrab.release(dlg); tkfocus(parent)})\n    tkbind(MaxIterEntry, \"<Return>\", onOK)\n    tkbind(ThresholdEntry, \"<Return>\", onOK)\n    tkbind(SeedEntry, \"<Return>\", onOK)\n    tkwait.window(dlg)\n    returnVal\n  }\n\n  win1$moreDialog <- function() {\n    more.param<<- more.Dialog(win1)\n    print(more.param)\n  }\n  win1$moreButton<- tk2button(win1$frame2, text = \"More...\", width=9,\n                              command = win1$moreDialog)\n\n  tkgrid(\n    tk2label(\n      win1$frame2, text = \"Method:\", justify = \"left\",\n      font=fontCommands\n    ),\n    win1$method,\n    tk2label(\n      win1$frame2, text = \"N Cluster:\", justify = \"left\",\n      font=fontCommands\n    ),\n    nCluster,\n    tk2label(\n      win1$frame2, text = \"Fuzzifier:\", justify = \"left\",\n      font=fontCommands\n    ),\n    fuzzifier.param,win1$moreButton,\n    padx = 10,pady = c(5,5),sticky=\"w\"\n  )\n  method <- tclVar(\"Fuzzy C-Means\")\n  tkconfigure(win1$method, textvariable = method)\n  method.nCluster <- tclVar(\"2\")\n  tkconfigure(nCluster, textvariable = method.nCluster)\n  method.fuzzifier <- tclVar(\"1\")\n  tkconfigure(fuzzifier.param, textvariable = method.fuzzifier)\n  on.next<-function(){\n    pb <- winProgressBar(\"Fuzzy Clustering Progress\", \"Clustering....\",\n                         0, 100, 0)\n    Sys.sleep(0.5)\n    setWinProgressBar(pb, 0, \"Fuzzy Clustering Progress\", \"Prepare Data\")\n    cat(\"Prepare data\\n\")\n    data.cluster<-managedata(var.choice)\n    Sys.sleep(0.5)\n    setWinProgressBar(pb, 20, \"Fuzzy Clustering Progress\", \"Data OK\")\n    cat(\"Data for Clustering is OK\\n\")\n    cat(paste(\"Method Used: \",tclvalue(method),\"\\n\"))\n    cat(paste(\"N cluster: \",tclvalue(method.nCluster),\"\\n\"))\n    cat(paste(\"Fuzzifier: \",tclvalue(method.fuzzifier),\"\\n\"))\n    cat(paste(\"Max Iteration: \",more.param[1],\"\\n\"))\n    cat(paste(\"Threshold: \",more.param[2],\"\\n\"))\n    typeof(tclvalue(method.nCluster))\n    if(more.param[3]==0)\n      cat(paste(\"NO Specific Seed\"))\n    else\n      cat(paste(\"Seed: \",more.param[3],\"\\n\"))\n    Sys.sleep(1)\n    setWinProgressBar(pb, 40, \"Fuzzy Clustering Progress\", \"Clustering Process\")\n    data.cluster<-scale(data.cluster)\n    if(tclvalue(method)==\"Fuzzy C-Means\")\n    cluster<-fuzzy.CM(data.cluster,as.numeric(tclvalue(method.nCluster)),\n                        as.numeric(tclvalue(method.fuzzifier)),\n                        as.numeric(more.param[1]),\n                        as.numeric(more.param[2]),\n                        as.numeric(more.param[3]))\n    else\n    cluster<-fuzzy.GK(data.cluster,as.numeric(tclvalue(method.nCluster)),\n                        as.numeric(tclvalue(method.fuzzifier)),\n                        as.numeric(more.param[1]),\n                        as.numeric(more.param[2]),\n                        as.numeric(more.param[3]))\n    Sys.sleep(1)\n    setWinProgressBar(pb, 60, \"Fuzzy Clustering Progress\", \"Clustering Validation\")\n\n    valid<-validation.index(cluster)\n    Sys.sleep(1)\n    setWinProgressBar(pb, 80, \"Fuzzy Clustering Progress\", \"Clustering MANOVA\")\n\n    manov<-checkManova(cluster)\n    Sys.sleep(1)\n    setWinProgressBar(pb, 100, \"Fuzzy Clustering Progress\", \"FINISH\")\n    Sys.sleep(1)\n    close(pb)\n    result.GUI(win1,cluster,valid,manov,tclvalue(method))\n  }\n\n  win1$frame3<-tk2frame(win1,borderwidth=2,relief=\"flat\")\n  tkgrid(win1$frame3,padx=25,pady=c(0,0),row=3,column=0)\n  tkgrid(\n    tk2button(win1$frame3, text = \"Close\",\n              command =function(){\n                tkdestroy(win1)\n              }),\n    tk2button(win1$frame3, text = \"Next\",command=on.next),\n    padx = 5, pady = c(0,15))\n  tk2theme(\"vista\")\n  tcl(\"ttk::style\", \"configure\", \"TFrame\", background=\"white\")\n  tcl(\"ttk::style\", \"configure\", \"TLabel\", background=\"white\")\n  tcl(\"ttk::style\", \"configure\", \"TButton\",font=fontCommands)\n  tcl(\"ttk::style\", \"map\", \"TButton\", background=c(\"active\", \"blue\"))\n\n  tkfocus(win1)\n\n}\n",
    "created" : 1462682499846.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "283460362",
    "id" : "33F80B0C",
    "lastKnownWriteTime" : 1464697727,
    "path" : "C:/Users/Achmad Fauzi/Google Drive/RcmdrPlugin.Fuzzcluster/R/inputPlugin.R",
    "project_path" : "R/inputPlugin.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}