{
    "contents" : "#' @export\nresult.GUI <- function(parent,cluster,valid,manov,method) {\n  require(tcltk2)\n  require(tcltk)\n  require(tkrplot)\n  require(ggplot2)\n  result <- tktoplevel(background = \"white\")\n  tktitle(result) <- \"Result\"\n  fontTitle <-\n    tkfont.create(\n      family = \"Gentium Book Basic\", size = 15,\n      weight = \"bold\", underline = T\n    )\n  fontCommand <- tkfont.create(family = \"Gentium Basic\", size = 10,\n                               weight = \"bold\")\n  fontLabel <- tkfont.create(\n    family = \"Gentium Basic\", size = 10,\n    weight = \"bold\",slant = \"italic\"\n  )\n  resultlabel <-\n    paste(\"RESULT OF CLUSTER ANALYSIS\\n\\\"\",toupper(method),\"\\\"\")\n  tkgrid(\n    tk2label(\n      result,text = resultlabel,justify = \"center\",background = \"white\",font =\n        fontTitle\n    ),row = 0,column = 0,pady = c(5,5),padx = 5\n  )\n\n  results <-\n    tk2notebook(result,tabs = c(\"Cluster Plot\",\"Cluster Description\"))\n  tkgrid(results,padx = 10)\n  onOk <- function()\n    tkdestroy(result)\n  tkgrid(tk2button(result, text = \"OK\",\n                   command = onOk),pady = c(8,3))\n  #----------------------------------------------------#\n  #   Tab. 1 Plot Cluster and Labeling                 #\n  #----------------------------------------------------#\n  result.tab <- tk2notetab(results,\"Cluster Plot\")\n  result.tab.panel <-\n    tk2frame(result.tab,borderwidth = 2,relief = \"flat\")\n  plot.label <-\n    tk2label(\n      result.tab.panel,text = \"Plot\",justify =\n        \"left\",font = fontLabel\n    )\n  labeling.label <-\n    tk2label(\n      result.tab.panel,text = \"Label\",justify = \"left\"\n      ,font = fontLabel\n    )\n  tkgrid(result.tab.panel)\n  tkgrid(\n    plot.label,row = 0,column = 0,pady = c(5,0),padx = 2\n  )\n  tkgrid(\n    labeling.label,row = 0,column = 25,pady = c(5,0),padx = 2\n  )\n  ####-> Prepare PCA Data and Plotting\n  pp <- ncol(cluster$Clust.desc)\n  data.clu <- cluster$Clust.desc[,1:pp - 1]\n  data.PCA <- prcomp(data.clu,scale. = T)\n  z1 <- as.data.frame(cbind(data.PCA$x[,1:2],cluster$Clust.desc[,pp]))\n  windowsFonts(A=windowsFont(\"Gentium Basic\"))\n  ploting <- function() {\n    datapc <- data.frame(varnames=rownames(data.PCA$rotation),\n                         data.PCA$rotation)\n    mult <- min(\n      (max(data[,\"PC2\"]) - min(data[,\"PC2\"])/(max(datapc[,\"PC2\"])-min(datapc[,\"PC2\"]))),\n      (max(data[,\"PC1\"]) - min(data[,\"PC1\"])/(max(datapc[,\"PC1\"])-min(datapc[,\"PC1\"])))\n    )\n    datapc <- transform(datapc,\n                        v1 = .7 * mult * (get(\"PC1\")),\n                        v2 = .7 * mult * (get(\"PC2\"))\n    )\n\n    ggplot(z1,aes(x = PC1,y = PC2,color=factor(V3))) +\n      geom_point() +stat_ellipse()+\n      xlab(paste(\"PC 1 \\nVariance Explained: \",\n                 round(summary(data.PCA)$importance[2,1] *100,2),\"%\")) +\n      ylab(paste(\"PC 2 \\nVariance Explained: \",\n                 round(summary(data.PCA)$importance[2,2] *100,2),\"%\")) +\n      theme_bw(base_size = 10,base_family = \"A\") + coord_equal()+\n      geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 3, vjust=1, color=\"red\") +\n      geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,\"cm\")), alpha=0.75, color=\"red\")-> pl\n    eval(substitute(print(pl)))\n  }\n  clusplot <- tkrplot(\n    result.tab.panel, fun = ploting ,\n    hscale = 1.5, vscale = 1.25\n  )\n  tkgrid(\n    clusplot,row = 1,column = 0,sticky = \"w\",padx = 2,pady =\n      c(0,5)\n  )\n\n  ####-> Labeling\n  tclTable.Label <- tclArray()\n\n  mat.L <-\n    c(\"Cluster\",cluster$Clust.desc[,ncol(cluster$Clust.desc)])\n  mat.L <- as.matrix(mat.L)\n  mat.L <- cbind(c(\"Obs\",paste(\"\",1:nrow(\n    cluster$Clust.desc\n  ))),mat.L)\n\n  for (i in 1:nrow(mat.L))\n    for (j in 1:ncol(mat.L))\n      tclTable.Label[[i - 1, j - 1]] <- mat.L[i, j]\n  cluslabel <-\n    tk2table(\n      result.tab.panel, variable = tclTable.Label,titlerows = 1,titlecols = 1,\n      width = 10,height = 25,rows = nrow(mat.L),cols = ncol(mat.L),\n      selectmode = \"extended\", colwidth = 12, background = \"white\",\n      yscrollcommand = function(...)\n        tkset(Lyscr,...)\n    )\n  Lyscr <- tk2scrollbar(\n    result.tab.panel, orient = \"vertical\",\n    command = function(...)\n      tkyview(cluslabel, ...)\n  )\n\n  tkgrid(\n    cluslabel,Lyscr,row = 1,column = 25,pady = c(0,5),padx = 5\n  )\n  tkgrid.configure(Lyscr, sticky = \"nse\")\n  tkgrid.rowconfigure(cluslabel, 0, weight = 1)\n  tkgrid.columnconfigure(cluslabel, 0, weight = 1)\n  tkconfigure(cluslabel,state = \"disable\")\n\n\n  #----------------------------------------------------#\n  #        Tab. 2 Fuzzy Membership, Centroid,          #\n  #          MANOVA, and Validation Index              #\n  #----------------------------------------------------#\n\n  desc.tab <- tk2notetab(results,\"Cluster Description\")\n  desc.tab.pan1 <-\n    tk2frame(desc.tab,borderwidth = 2,relief = \"flat\")\n  tkgrid(desc.tab.pan1,sticky = \"w\",padx = 20)\n  ####-> Membership\n  tkgrid(\n    tk2label(desc.tab.pan1,text = \"Fuzzy Membership\",justify = \"left\",font =\n               fontLabel),pady = c(25,5),padx = 5,sticky = \"w\"\n  )\n  tclTableU <- tclArray()\n\n  mat.U <- rbind(paste(\"Clus\",1:ncol(cluster$U)),cluster$U)\n  mat.U <- cbind(c(\"\",paste(\"Obs\",1:nrow(cluster$U))),mat.U)\n  for (i in 1:nrow(mat.U))\n    for (j in 1:ncol(mat.U))\n      if (i < 2)\n        tclTableU[[i - 1, j - 1]] <- strsplit(mat.U[i, j],\" \",fixed = T)[[1]]\n  else if (j < 2)\n    tclTableU[[i - 1, j - 1]] <- strsplit(mat.U[i, j],\" \",fixed = T)[[1]]\n  else\n    tclTableU[[i - 1, j - 1]] <- round(as.numeric(mat.U[i, j]),5)\n  U.table <-\n    tk2table(\n      desc.tab.pan1, variable = tclTableU,titlerows = 1,titlecols = 1, width =\n        4,height = 11,rows = nrow(mat.U),cols = ncol(mat.U),selectmode = \"extended\", colwidth = 12, background = \"white\",yscrollcommand = function(...)\n          tkset(yscr,...),xscrollcommand = function(...)\n            tkset(xscr, ...)\n    )\n  yscr <- tk2scrollbar(\n    desc.tab.pan1, orient = \"vertical\",\n    command = function(...)\n      tkyview(U.table, ...)\n  )\n  xscr <- tk2scrollbar(\n    desc.tab.pan1, orient = \"horizontal\",\n    command = function(...)\n      tkxview(U.table, ...)\n  )\n  tkgrid(\n    U.table,yscr,sticky = \"w\",padx = 2,pady =\n      c(0,5)\n  )\n  tkconfigure(U.table,state = \"disable\")\n  tkgrid.configure(yscr, sticky = \"nsw\")\n  tkgrid(xscr, sticky = \"new\")\n  tkgrid.rowconfigure(U.table, 0, weight = 1)\n  tkgrid.columnconfigure(U.table, 0, weight = 1)\n\n  ####-> Centroid\n  desc.tab.pan2 <-\n    tk2frame(desc.tab,borderwidth = 2,relief = \"flat\")\n  tkgrid(\n    desc.tab.pan2,column = 1,row = 0,sticky = \"nw\",padx = 15\n  )\n  tkgrid(\n    tk2label(desc.tab.pan2,text = \"Cluster Centroid\",justify = \"left\",font =\n               fontLabel),pady = c(25,5),padx = 5,sticky = \"w\"\n  )\n  tclTableV <- tclArray()\n\n  mat.V <- rbind(paste(\"Var \",1:ncol(cluster$V)),cluster$V)\n  mat.V <- cbind(c(\"\",paste(\"Cluster\",1:nrow(cluster$V))),mat.V)\n  mat.V <- t(mat.V)\n  for (i in 1:nrow(mat.V))\n    for (j in 1:ncol(mat.V))\n      if (i < 2)\n        tclTableV[[i - 1, j - 1]] <- strsplit(mat.V[i, j],\" \",fixed = T)[[1]]\n  else if (j < 2)\n    tclTableV[[i - 1, j - 1]] <- strsplit(mat.V[i, j],\" \",fixed = T)[[1]]\n  else\n    tclTableV[[i - 1, j - 1]] <- round(as.numeric(mat.V[i, j]),5)\n  V.table <-\n    tk2table(\n      desc.tab.pan2, variable = tclTableV,titlerows = 1,titlecols = 1, width =\n        4,height = 5,rows = nrow(mat.V),cols = ncol(mat.V),selectmode = \"extended\", colwidth = 12, background = \"white\",yscrollcommand = function(...)\n          tkset(Vyscr,...),xscrollcommand = function(...)\n            tkset(Vxscr, ...)\n    )\n  Vyscr <- tk2scrollbar(\n    desc.tab.pan2, orient = \"vertical\",\n    command = function(...)\n      tkyview(V.table, ...)\n  )\n  Vxscr <- tk2scrollbar(\n    desc.tab.pan2, orient = \"horizontal\",\n    command = function(...)\n      tkxview(V.table, ...)\n  )\n  tkgrid(\n    V.table,Vyscr,sticky = \"w\",padx = 2,pady =\n      c(0,0)\n  )\n  tkgrid.configure(Vyscr, sticky = \"nsw\")\n  tkgrid(Vxscr, sticky = \"new\")\n  tkgrid.rowconfigure(V.table, 0, weight = 1)\n  tkgrid.columnconfigure(V.table, 0, weight = 1)\n  tkconfigure(V.table,state = \"disable\")\n\n  ####-Validation Index\n  tkgrid(\n    tk2label(desc.tab,text = \"Validation Index\",justify = \"left\",font =\n               fontLabel),pady = c(25,5),padx = 20,sticky = \"w\"\n  )\n  tclValid <- tclArray()\n\n  mat.val <- c(\"Index Value\",valid[1],valid[2],valid[3],valid[4])\n  mat.val <- as.matrix(mat.val)\n  mat.val <-\n    cbind(c(\"Index Name\",\"Kwon Index\",\"MPC Index\",\"CE Index\",\"XB index\"),mat.val)\n  mat.val <- t(mat.val)\n  for (i in 1:nrow(mat.val))\n    for (j in 1:ncol(mat.val))\n      if (i < 2)\n        tclValid[[i - 1, j - 1]] <- strsplit(mat.val[i, j],\" \",fixed = T)[[1]]\n  else if (j < 2)\n    tclValid[[i - 1, j - 1]] <- strsplit(mat.val[i, j],\" \",fixed = T)[[1]]\n  else\n    tclValid[[i - 1, j - 1]] <- round(as.numeric(mat.val[i, j]),5)\n  Valid.table <-\n    tk2table(\n      desc.tab, variable = tclValid,titlerows = 1,titlecols = 1, width =\n        5,height = 2,rows = nrow(mat.val),cols = ncol(mat.val),selectmode = \"extended\", colwidth = 15, background = \"white\"\n    )\n  tkgrid(\n    Valid.table,sticky = \"w\",columnspan = 2,padx = 20\n  )\n  tkgrid.rowconfigure(Valid.table, 0, weight = 1)\n  tkgrid.columnconfigure(Valid.table, 0, weight = 1)\n  tkconfigure(Valid.table,state = \"disable\")\n\n  ####- Manova\n  tkgrid(\n    tk2label(desc.tab,text = \"MANOVA Analysis\",justify = \"left\",font =\n               fontLabel),pady = c(25,5),padx = 20,sticky = \"w\"\n  )\n  tclManov <- tclArray()\n\n  mat.man <- rbind(colnames(manov),manov)\n  mat.man <- cbind(c(\"\",row.names(manov)),mat.man)\n\n  for (i in 1:nrow(mat.man))\n    for (j in 1:ncol(mat.man))\n      if (i < 2)\n        tclManov[[i - 1, j - 1]] <- strsplit(mat.man[i, j],\" \",fixed = T)[[1]]\n  else if (j < 2)\n    tclManov[[i - 1, j - 1]] <- strsplit(mat.man[i, j],\" \",fixed = T)[[1]]\n  else if (is.na(mat.man[i,j]))\n    tclManov[[i - 1,j - 1]] <- strsplit(mat.man[i, j],\" \",fixed = T)[[1]]\n  else\n    tclManov[[i - 1, j - 1]] <- round(as.numeric(mat.man[i, j]),3)\n\n  man.table <-\n    tk2table(\n      desc.tab, variable = tclManov,titlerows = 1,titlecols = 1, height =\n        3,rows = nrow(mat.man),cols = ncol(mat.man),selectmode = \"extended\", colwidth = 12, background = \"white\"\n    )\n  tkgrid(man.table,sticky = \"w\",columnspan = 2,padx = 20)\n  tkgrid.rowconfigure(man.table, 0, weight = 1)\n  tkgrid.columnconfigure(man.table, 0, weight = 1)\n  tkconfigure(man.table,state = \"disable\")\n\n  tcl(\"ttk::style\", \"configure\", \"TNotebook\", background = \"white\")\n#   tcl(\"ttk::style\", \"configure\", \"TFrame\", background = \"white\")\n#   tcl(\"ttk::style\", \"configure\", \"TLabel\", background = \"white\")\n#   tcl(\"ttk::style\", \"configure\", \"TButton\", background = \"white\",font =\n#         fontCommand)\n  tcl(\n    \"ttk::style\", \"configure\", \"TNotebook.Tab\", background = \"gray\",font = fontCommand\n  )\n  tcl(\"ttk::style\", \"map\", \"TNotebook.Tab\", background = c(\"active\", \"gray\"))\n  tcl(\"ttk::style\", \"map\", \"TNotebook.Tab\", background = c(\"active\", \"gray\"))\n  tcl(\"ttk::style\", \"map\", \"TNotebook.Tab\", background = c(\"selected\",\n                                                           \"white\"))\n  tkfocus(result.tab)\n  tkdestroy(parent)\n}\n",
    "created" : 1462700416491.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4182136928",
    "id" : "1CD80DEF",
    "lastKnownWriteTime" : 1464701367,
    "path" : "C:/Users/Achmad Fauzi/Google Drive/RcmdrPlugin.Fuzzcluster/R/result.R",
    "project_path" : "R/result.R",
    "properties" : {
        "notebook_format" : "pdf_document",
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}